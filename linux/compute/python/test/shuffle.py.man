.SH NAME
shuffle.py \- a script to create and shuffle a standard deck of cards

.SH SYNOPSIS
.B shuffle.py

.SH DESCRIPTION
.B shuffle.py
is a simple script that generates a standard deck of playing cards and shuffles it using Python's random module.

.SH OPTIONS
This script does not take any command-line options.

.SH COMMANDS
This script does not support any additional commands.

.SH FUNCTIONS
.TP
.B create_deck
This function creates a standard deck of 52 playing cards, each represented as a string in the format 'value of suit'.

.TP
.B shuffle_deck(deck)
This function takes a deck of cards (list of strings) as an argument and shuffles it in place.

.SH USAGE
To use
.B shuffle.py,
simply run the script without any arguments. It will print out the original ordered deck of cards and then the shuffled deck of cards.

.SH EXAMPLES
To run the script, use the following command:
.IP
